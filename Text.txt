name: ArgoCD Deploy via OIDC

on:
  workflow_dispatch:
    inputs:
      feature_branch:
        description: 'Feature branch to deploy'
        required: true
        default: 'main'
      image_tag:
        description: 'Docker image tag to deploy (from CI)'
        required: true

permissions:
  id-token: write      # Enable use of OIDC in GitHub Actions
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.feature_branch }}

      - name: Install kubectl CLI
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Argo Rollouts CLI
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts


      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}                # Set this secret in your repo with your OIDC-enabled role ARN
          aws-region: ${{ secrets.AWS_REGION }}                       # Set this secret in your repo, e.g. 'ap-south-1'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name <your-eks-cluster>

      - name: Set kubectl context namespace
        run: |
          kubectl config set-context --current --namespace=argocd

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD in Core Mode
        run: |
          argocd login cd.argoproj.io --core

      - name: Set image tag in ArgoCD Application
        env:
          ARGOCD_APP: <your-argocd-app>
        run: |
          argocd app set $ARGOCD_APP --helm-set image.tag=${{ inputs.image_tag }}

      - name: Sync ArgoCD Application
        env:
          ARGOCD_APP: <your-argocd-app>
        run: |
          argocd app sync $ARGOCD_APP

      # Optional: Validate rollout with argo rollouts CLI (requires argo-rollouts & Rollout resource)
      # - name: Wait for rollout (optional)
      #   run: |
      #     kubectl argo rollouts get rollout <your-rollout-name> -n argocd || echo "Manual validation may be required."
