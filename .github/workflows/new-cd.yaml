# cd-feature.yaml
name: CD Deploy - Feature Branch

on:
  workflow_dispatch:
  push:
    branches:
      - 'feature/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENV: feature
      APP_NAME: app1

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      # - name: Set up AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.FEATURE_AWS_ROLE_ARN }}
      #     aws-region: us-east-1

      # - name: Update kubeconfig for EKS cluster
      #   run: aws eks update-kubeconfig --region us-east-1 --name feature-cluster

      - name: Install yq and kubectl-argo-rollouts
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Extract latest release tag
        id: metadata
        run: |
          export LATEST_TAG=$(yq '.latest_release_tag' metadata-files/app-release-metadata.yaml)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Patch values.yaml with latest image tag
        run: |
          yq e -i '.app1.image.tag = strenv(LATEST_TAG)' charts/app1/values.yaml

      - name: Commit and push updated values.yaml
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          git commit -am "Update app1 image tag to $LATEST_TAG"
          git push origin ${{ github.ref_name }}

      - name: Get rollout name from Helm chart
        run: echo "ROLLOUT_NAME=$(yq '.app1.name' charts/app1/values.yaml)" >> $GITHUB_ENV

      - name: Promote to 30% traffic
        run: |
          echo "Promoting rollout to 30%"
          kubectl argo rollouts promote $ROLLOUT_NAME -n $ENV || exit 1
          echo "Waiting for rollout to stabilize..."
          kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1

      - name: Wait for manual approval to continue to 60%
        run: echo "Waiting for approval..." # Manual approval should be handled via environment protection rules in GitHub UI

      - name: Promote to 60% traffic
        if: ${{ !cancelled() }}
        run: |
          echo "Promoting rollout to 60%"
          kubectl argo rollouts promote $ROLLOUT_NAME -n $ENV || exit 1
          echo "Waiting for rollout to stabilize..."
          kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1

      - name: Wait for manual approval to continue to 100%
        if: ${{ !cancelled() }}
        run: echo "Waiting for approval..." # Manual approval should be handled via environment protection rules in GitHub UI

      - name: Promote to 100% traffic
        if: ${{ !cancelled() }}
        run: |
          echo "Promoting rollout to 100%"
          kubectl argo rollouts promote $ROLLOUT_NAME -n $ENV || exit 1
          echo "Waiting for rollout to stabilize..."
          kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1

      - name: Rollback to last successful version
        if: ${{ cancelled() }}
        run: |
          echo "Rolling back to last successful version..."
          export LAST_SUCCESSFUL_TAG=$(yq '.last_successful_version' metadata-files/app-release-metadata.yaml)
          yq e -i '.app1.image.tag = strenv(LAST_SUCCESSFUL_TAG)' charts/app1/values.yaml
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          git commit -am "Rollback app1 image tag to $LAST_SUCCESSFUL_TAG"
          git push origin ${{ github.ref_name }}

      # - name: Notify on Slack
      #   if: ${{ !cancelled() }}
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: >
      #       {
      #         "text": ":rocket: Feature rollout for *${{ env.APP_NAME }}* to *${{ env.ENV }}* complete! Promoted to 100% traffic after manual approval."
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Notify on Slack (Rollback)
      #   if: ${{ cancelled() }}
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: >
      #       {
      #         "text": ":warning: Rollback triggered for *${{ env.APP_NAME }}* in *${{ env.ENV }}*. Deployment reverted to last successful version after manual rejection."
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
