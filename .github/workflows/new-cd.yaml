# cd-feature.yaml
name: CD Deploy - Feature Branch

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: 'Application name'
        required: true
        default: 'app1'
      ENV:
        description: 'Environment (e.g., feature, staging, prod)'
        required: true
        default: 'feature'
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      AWS_SESSION_TOKEN:
        description: 'AWS Session Token'
        required: false
      AWS_REGION:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app_image_changed: ${{ steps.detect.outputs.app_image_changed }}
      chart_version_changed: ${{ steps.detect.outputs.chart_version_changed }}
      latest_image_tag: ${{ steps.detect.outputs.latest_image_tag }}
      latest_chart_version: ${{ steps.detect.outputs.latest_chart_version }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      - name: Detect app image and chart version changes
        id: detect
        run: |
          APP_IMAGE_CHANGED=false
          CHART_VERSION_CHANGED=false
          LATEST_IMAGE_TAG=$(yq e ".app.${APP_NAME}.latest_version" app-release-metadata.yaml)
          LAST_IMAGE_TAG=$(yq e ".app.${APP_NAME}.last_successful_version" app-release-metadata.yaml)
          LATEST_CHART_VERSION=$(yq e ".app.${APP_NAME}.latest_version" helm-release-metadata.yaml)
          LAST_CHART_VERSION=$(yq e ".app.${APP_NAME}.last_successful_version" helm-release-metadata.yaml)
          if [ "$LATEST_IMAGE_TAG" != "$LAST_IMAGE_TAG" ]; then
            APP_IMAGE_CHANGED=true
          fi
          if [ "$LATEST_CHART_VERSION" != "$LAST_CHART_VERSION" ]; then
            CHART_VERSION_CHANGED=true
          fi
          echo "app_image_changed=$APP_IMAGE_CHANGED" >> $GITHUB_OUTPUT
          echo "chart_version_changed=$CHART_VERSION_CHANGED" >> $GITHUB_OUTPUT
          echo "latest_image_tag=$LATEST_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "latest_chart_version=$LATEST_CHART_VERSION" >> $GITHUB_OUTPUT

  deploy-30:
    needs: detect-changes
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      ENV: ${{ github.event.inputs.ENV }}
      AWS_ACCESS_KEY_ID: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
    outputs:
      rollout_name: ${{ steps.get_rollout_name.outputs.rollout_name }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region $AWS_REGION --name $ENV-cluster
      - name: Install yq and kubectl-argo-rollouts
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      - name: Patch values.yaml with latest image tag
        if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' }}
        run: |
          if [ "$APP_NAME" = "app1" ]; then
            yq e -i '.app1.image.tag = "${{ needs.detect-changes.outputs.latest_image_tag }}"' charts/app1/values.yaml
          elif [ "$APP_NAME" = "app2" ]; then
            yq e -i '.app2.image.tag = "${{ needs.detect-changes.outputs.latest_image_tag }}"' charts/app2/values.yaml
          fi
      - name: Patch Chart.yaml with latest chart version
        if: ${{ needs.detect-changes.outputs.chart_version_changed == 'true' }}
        run: |
          if [ "$APP_NAME" = "app1" ]; then
            yq e -i '.version = "${{ needs.detect-changes.outputs.latest_chart_version }}"' charts/app1/Chart.yaml
          elif [ "$APP_NAME" = "app2" ]; then
            yq e -i '.version = "${{ needs.detect-changes.outputs.latest_chart_version }}"' charts/app2/Chart.yaml
          fi
      - name: Commit and push updated files
        if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          if [ "$APP_NAME" = "app1" ]; then
            git add charts/app1/values.yaml charts/app1/Chart.yaml || true
          elif [ "$APP_NAME" = "app2" ]; then
            git add charts/app2/values.yaml charts/app2/Chart.yaml || true
          fi
          COMMIT_MSG="Update $APP_NAME:"
          if [ "${{ needs.detect-changes.outputs.app_image_changed }}" == "true" ]; then
            COMMIT_MSG+=" image tag to ${{ needs.detect-changes.outputs.latest_image_tag }}"
          fi
          if [ "${{ needs.detect-changes.outputs.chart_version_changed }}" == "true" ]; then
            if [ "${{ needs.detect-changes.outputs.app_image_changed }}" == "true" ]; then
              COMMIT_MSG+=" and"
            fi
            COMMIT_MSG+=" chart version to ${{ needs.detect-changes.outputs.latest_chart_version }}"
          fi
          COMMIT_MSG+=" (Promoted to 30% traffic)"
          git commit -am "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
      - name: Get rollout name from cluster
        id: get_rollout_name
        run: |
          ROLLOUT_NAME=$(kubectl get rollouts.argoproj.io -n $ENV -o jsonpath='{.items[0].metadata.name}')
          echo "rollout_name=$ROLLOUT_NAME" >> $GITHUB_OUTPUT
      - name: Sync ArgoCD Application using kubectl
        if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
        run: |
          SYNC_STATUS=$(kubectl get application $APP_NAME -n argocd -o jsonpath='{.status.sync.status}')
          if [ "$SYNC_STATUS" != "Synced" ]; then
            echo "Application needs sync, triggering..."
            kubectl -n argocd patch application $APP_NAME --type merge -p '{"spec": {"syncPolicy": {"automated": null}}, "status": {"operationState": null}}'
          else
            echo "Application is already synced"
          fi
      - name: Wait for rollout to be ready
        if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
        run: |
          echo "Checking rollout status..."
          kubectl argo rollouts status ${{ steps.get_rollout_name.outputs.rollout_name }} -n $ENV --timeout 30s || echo "Rollout is paused (expected behavior)"
          echo "Rollout is ready for promotion to 30%"
      - name: Promote to 30% traffic
        if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
        run: |
          echo "Promoting rollout to 30% traffic"
          kubectl argo rollouts set-weight ${{ steps.get_rollout_name.outputs.rollout_name }} 30 -n $ENV || exit 1
          echo "Waiting for rollout to stabilize at 30%..."
          kubectl argo rollouts status ${{ steps.get_rollout_name.outputs.rollout_name }} -n $ENV --timeout 60s || echo "Rollout stabilized at 30%"
      - name: Wait for rollout to be paused
        if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
        run: |
          ROLLOUT_NAME=${{ steps.get_rollout_name.outputs.rollout_name }}
          NAMESPACE=$ENV
          TIMEOUT=300
          INTERVAL=10
          elapsed=0
          while true; do
            PAUSED=$(kubectl argo rollouts get rollout $ROLLOUT_NAME -n $NAMESPACE -o jsonpath='{.status.pauseConditions}')
            if [[ "$PAUSED" != "" && "$PAUSED" != "[]" ]]; then
              echo "Rollout is paused."
              break
            fi
            if [ $elapsed -ge $TIMEOUT ]; then
              echo "Timed out waiting for rollout to be paused."
              exit 1
            fi
            echo "Waiting for rollout to be paused..."
            sleep $INTERVAL
            elapsed=$((elapsed + INTERVAL))
          done
      - name: Upload kubeconfig artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig.yaml
          retention-days: 1

  approve-60:
    needs: deploy-30
    if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.manual_approval.outputs.approved }}
    steps:
      - name: Wait for manual approval to promote to 60%
        id: manual_approval
        uses: tfstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: user1,user2,user3,hard-working-team
          instructions: "Approve to continue rollout to 60% traffic for ${{ env.APP_NAME }} version ${{ needs.detect-changes.outputs.latest_image_tag }} and/or chart version ${{ needs.detect-changes.outputs.latest_chart_version }} in ${{ env.ENV }} environment."

  deploy-60:
    needs: [approve-60, deploy-30, detect-changes]
    if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      ENV: ${{ github.event.inputs.ENV }}
      AWS_ACCESS_KEY_ID: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      ROLLOUT_NAME: ${{ needs.deploy-30.outputs.rollout_name }}
    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region $AWS_REGION --name $ENV-cluster
      - name: Install yq and kubectl-argo-rollouts
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      - name: Promote to 60% traffic
        run: |
          echo "Promoting rollout to 60% traffic"
          kubectl argo rollouts set-weight $ROLLOUT_NAME 60 -n $ENV || exit 1
          echo "Waiting for rollout to stabilize..."
          kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1
          echo "Promoted $APP_NAME to 60% traffic for version ${{ needs.detect-changes.outputs.latest_image_tag }} and/or chart version ${{ needs.detect-changes.outputs.latest_chart_version }}"
      - name: Wait for rollout to be paused
        run: |
          ROLLOUT_NAME=$ROLLOUT_NAME
          NAMESPACE=$ENV
          TIMEOUT=300
          INTERVAL=10
          elapsed=0
          while true; do
            PAUSED=$(kubectl argo rollouts get rollout $ROLLOUT_NAME -n $NAMESPACE -o jsonpath='{.status.pauseConditions}')
            if [[ "$PAUSED" != "" && "$PAUSED" != "[]" ]]; then
              echo "Rollout is paused."
              break
            fi
            if [ $elapsed -ge $TIMEOUT ]; then
              echo "Timed out waiting for rollout to be paused."
              exit 1
            fi
            echo "Waiting for rollout to be paused..."
            sleep $INTERVAL
            elapsed=$((elapsed + INTERVAL))
          done

  approve-100:
    needs: [deploy-60, detect-changes]
    if: ${{ needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.manual_approval.outputs.approved }}
    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      ENV: ${{ github.event.inputs.ENV }}
    steps:
      - name: Wait for manual approval to promote to 100%
        id: manual_approval
        uses: tfstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: user1,user2,user3,hard-working-team
          instructions: "Approve to continue rollout to 100% traffic for ${{ env.APP_NAME }} version ${{ needs.detect-changes.outputs.latest_image_tag }} and/or chart version ${{ needs.detect-changes.outputs.latest_chart_version }} in ${{ env.ENV }} environment."

  deploy-100:
    needs: [approve-100, deploy-30, detect-changes]
    if: ${{ needs.approve-100.outputs.approved == 'true' && (needs.detect-changes.outputs.app_image_changed == 'true' || needs.detect-changes.outputs.chart_version_changed == 'true') }}
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      ENV: ${{ github.event.inputs.ENV }}
      AWS_ACCESS_KEY_ID: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      ROLLOUT_NAME: ${{ needs.deploy-30.outputs.rollout_name }}
    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region $AWS_REGION --name $ENV-cluster
      - name: Install yq and kubectl-argo-rollouts
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      - name: Promote to 100% traffic
        run: |
          echo "Promoting rollout to 100% traffic"
          kubectl argo rollouts set-weight $ROLLOUT_NAME 100 -n $ENV || exit 1
          echo "Waiting for rollout to stabilize..."
          kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1
          echo "Promoted $APP_NAME to 100% traffic for version ${{ needs.detect-changes.outputs.latest_image_tag }} and/or chart version ${{ needs.detect-changes.outputs.latest_chart_version }}"

  rollback:
    needs: [approve-60, approve-100, deploy-30, deploy-60, deploy-100]
    if: |
      always() &&
      (
        (needs.approve-60.result == 'failure' || needs.approve-60.result == 'cancelled' || needs.approve-60.outputs.approved == 'false') ||
        (needs.approve-100.result == 'failure' || needs.approve-100.result == 'cancelled' || needs.approve-100.outputs.approved == 'false') ||
        (needs.deploy-30.result == 'failure' || needs.deploy-30.result == 'cancelled') ||
        (needs.deploy-60.result == 'failure' || needs.deploy-60.result == 'cancelled') ||
        (needs.deploy-100.result == 'failure' || needs.deploy-100.result == 'cancelled')
      )
    runs-on: ubuntu-latest
    # ... rest of your rollback job ...
    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      ENV: ${{ github.event.inputs.ENV }}
      AWS_ACCESS_KEY_ID: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region $AWS_REGION --name $ENV-cluster
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      - name: Install yq and kubectl-argo-rollouts
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      - name: Get rollout name from cluster
        id: get_rollout_name
        run: |
          ROLLOUT_NAME=$(kubectl get rollouts.argoproj.io -n $ENV -o jsonpath='{.items[0].metadata.name}')
          echo "rollout_name=$ROLLOUT_NAME" >> $GITHUB_OUTPUT
      - name: Rollback to last successful version
        run: |
          echo "Rolling back to last successful version for $APP_NAME..."

          LATEST_VERSION=$(yq e ".app.${APP_NAME}.latest_version" app-release-metadata.yaml)
          LAST_SUCCESSFUL_VERSION=$(yq e ".app.${APP_NAME}.last_successful_version" app-release-metadata.yaml)
          PREV_SUCCESSFUL_VERSION=$(echo $LAST_SUCCESSFUL_VERSION | awk -F. '{patch=$3-1; print $1"."$2"."patch}' | sed 's/\"//g')

          LATEST_CHART_VERSION=$(yq e ".app.${APP_NAME}.latest_version" helm-release-metadata.yaml)
          LAST_SUCCESSFUL_CHART_VERSION=$(yq e ".app.${APP_NAME}.last_successful_version" helm-release-metadata.yaml)
          PREV_SUCCESSFUL_CHART_VERSION=$(echo $LAST_SUCCESSFUL_CHART_VERSION | awk -F. '{patch=$3-1; print $1"."$2"."patch}' | sed 's/\"//g')

          # Update the image tag in the correct values.yaml
          yq e -i ".${APP_NAME}.image.tag = strenv(LAST_SUCCESSFUL_VERSION)" charts/${APP_NAME}/values.yaml
          git add charts/${APP_NAME}/values.yaml

          # Update only the relevant app's metadata in app-release-metadata.yaml
          yq e -i ".app.${APP_NAME}.last_failed_version = strenv(LATEST_VERSION)" app-release-metadata.yaml
          yq e -i ".app.${APP_NAME}.latest_version = strenv(LAST_SUCCESSFUL_VERSION)" app-release-metadata.yaml
          yq e -i ".app.${APP_NAME}.last_successful_version = strenv(PREV_SUCCESSFUL_VERSION)" app-release-metadata.yaml
          git add app-release-metadata.yaml

          # Update only the relevant app's metadata in helm-release-metadata.yaml
          yq e -i ".app.${APP_NAME}.last_failed_version = strenv(LATEST_CHART_VERSION)" helm-release-metadata.yaml
          yq e -i ".app.${APP_NAME}.latest_version = strenv(LAST_SUCCESSFUL_CHART_VERSION)" helm-release-metadata.yaml
          yq e -i ".app.${APP_NAME}.last_successful_version = strenv(PREV_SUCCESSFUL_CHART_VERSION)" helm-release-metadata.yaml
          git add helm-release-metadata.yaml

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          git commit -m "Rollback $APP_NAME image tag to $LAST_SUCCESSFUL_VERSION and chart version to $LAST_SUCCESSFUL_CHART_VERSION and update metadata after failed deployment of $LATEST_VERSION/$LATEST_CHART_VERSION"
          git push origin ${{ github.ref_name }}
      - name: Sync ArgoCD Application for rollback
        run: |
          echo "Syncing ArgoCD application to apply rollback..."
          kubectl patch application $APP_NAME -n argocd -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"'$(date +%s)'"}}}' --type=merge
          echo "Waiting for sync to complete..."
          kubectl wait --for=condition=Synced application/$APP_NAME -n argocd --timeout=300s
          echo "Checking application health..."
          kubectl wait --for=condition=Healthy application/$APP_NAME -n argocd --timeout=300s || echo "Application sync completed"
      - name: Perform Argo Rollout rollback
        run: |
          echo "Performing Argo Rollout rollback..."
          kubectl argo rollouts rollback ${{ steps.get_rollout_name.outputs.rollout_name }} -n $ENV || exit 1
          echo "Waiting for rollback to complete..."
          kubectl argo rollouts status ${{ steps.get_rollout_name.outputs.rollout_name }} -n $ENV --watch || echo "Rollback completed"
          echo "Rollback to $LAST_SUCCESSFUL_TAG completed successfully"

      - name: Notify on Slack
        if: ${{ !cancelled() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {
              "text": ":rocket: Rollout for *${{ env.APP_NAME }}* to *${{ env.ENV }}* complete! Promoted to *${{ needs.deploy-30.outputs.rollout_name }}* at *${{ needs.detect-changes.outputs.latest_image_tag }}* and/or chart version *${{ needs.detect-changes.outputs.latest_chart_version }}* at *${{ github.workflow }}* workflow."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on Slack (Rollback)
        if: ${{ cancelled() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {
              "text": ":warning: Rollback triggered for *${{ env.APP_NAME }}* in *${{ env.ENV }}*. Deployment reverted to last successful version *${{ needs.detect-changes.outputs.latest_image_tag }}* after manual rejection."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
