name: Sync App Release Tag to Helm Chart Repo

on:
  workflow_call:
    inputs:
      version:
        description: 'Release version (e.g., 0.2.0, 1.0.0)'
        required: true
        type: string
      release_tag:
        description: 'Release tag (for production releases, e.g., v1.0.0)'
        required: false
        type: string

jobs:
  create-release:
    name: Auto Create Git Tag and Release Notes
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get git SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set tag name
        id: tag
        run: |
          branch="${GITHUB_REF_NAME}"
          version="${{ inputs.version }}"
          git_sha="${{ steps.sha.outputs.sha }}"

          if [[ "$branch" == "production" ]]; then
            if [[ -z "${{ inputs.release_tag }}" ]]; then
              echo "Production releases require a release_tag input!" >&2
              exit 1
            fi
            tag="${{ inputs.release_tag }}"
          else
            tag="${branch}-${version}_${git_sha}"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "git_sha=$git_sha" >> $GITHUB_OUTPUT

      - name: Generate pretty release notes
        id: changelog
        run: |
          version="${{ inputs.version }}"
          git_sha="${{ steps.sha.outputs.sha }}"
          branch="${GITHUB_REF_NAME}"

          # Create header
          echo "# Release ${version} (${branch})" > release_notes.md
          echo "" >> release_notes.md
          if [[ "$branch" != "production" ]]; then
            echo "**Git SHA:** \`${git_sha}\`" >> release_notes.md
          fi
          echo "**Branch:** \`${branch}\`" >> release_notes.md
          echo "**Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> release_notes.md
          echo "" >> release_notes.md

          # Add changes section
          echo "## ðŸ“‹ Changes" >> release_notes.md
          echo "" >> release_notes.md

          if [[ "$branch" == "production" ]]; then
            # Find the previous production tag (v*), excluding the new one
            new_tag="${{ inputs.release_tag }}"
            prev_tag=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "^$new_tag$" | head -n1)
            if [ -z "$prev_tag" ]; then
              echo "### Initial Production Release" >> release_notes.md
              echo "" >> release_notes.md
              git log --pretty=format:"- **%s** (%h) - %an" --no-merges >> release_notes.md
            else
              echo "### Changes since ${prev_tag}" >> release_notes.md
              echo "" >> release_notes.md
              git log "$prev_tag"..HEAD --pretty=format:"- **%s** (%h) - %an" --no-merges >> release_notes.md
            fi
          else
            # Non-production: use latest tag as before
            latest_tag=$(git tag --sort=-creatordate | head -n1)
            if [ -z "$latest_tag" ]; then
              echo "### Initial Release" >> release_notes.md
              echo "" >> release_notes.md
              git log --pretty=format:"- **%s** (%h) - %an" --no-merges >> release_notes.md
            else
              echo "### Changes since ${latest_tag}" >> release_notes.md
              echo "" >> release_notes.md
              git log "$latest_tag"..HEAD --pretty=format:"- **%s** (%h) - %an" --no-merges >> release_notes.md
            fi
          fi

          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "*This release was automatically generated by GitHub Actions*" >> release_notes.md

          # Output for downstream steps (if needed)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create new release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ inputs.version }}
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
