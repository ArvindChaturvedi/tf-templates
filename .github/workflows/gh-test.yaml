name: Sync App Release Tag to Helm Chart Repo

on:
  push:
    tags:
      - 'v*'  # Trigger on new tag creation only
  workflow_dispatch:

jobs:
  sync-release-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source (App) repo
        uses: actions/checkout@v3

      - name: Extract branch from tag
        id: get_branch
        run: |
          tag_ref=$(git for-each-ref --format='%(refname:short) %(creatordate:iso)' refs/remotes/origin | grep ${{ github.ref_name }} | sort -k2 | tail -n1 | awk '{print $1}')
          branch=$(echo "$tag_ref" | sed 's|origin/||')
          
          # Map branches to their corresponding helm chart branches
          case "$branch" in
            "qa")
              echo "helm_branch=qabranch" >> $GITHUB_OUTPUT
              ;;
            "develop")
              echo "helm_branch=develop" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "helm_branch=production" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "helm_branch=$branch" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "Source branch: $branch"
          echo "Target helm branch: ${{ steps.get_branch.outputs.helm_branch }}"

      - name: Set variables
        id: vars
        run: |
          echo "new_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "Using new tag: ${{ steps.vars.outputs.new_tag }}"

      - name: Checkout target Helm chart repo
        uses: actions/checkout@v3
        with:
          repository: your-org-or-user/helm-chart-repo
          token: ${{ secrets.TARGET_REPO_PAT }}
          ref: ${{ steps.get_branch.outputs.helm_branch }}
          path: helm-repo

      - name: Install yq (Go binary version)
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Update app-release-metadata.yaml
        run: |
          cd helm-repo
          FILE="app-release-metadata.yaml"
          
          # Validate file exists
          if [ ! -f "$FILE" ]; then
            echo "Error: $FILE not found in the target repository"
            exit 1
          fi
          
          # Get current values
          current_latest=$(yq '.app.latest_version' $FILE)
          if [ -z "$current_latest" ]; then
            echo "Error: Could not read current latest_version from $FILE"
            exit 1
          fi
          
          echo "Current latest_version: $current_latest"
          echo "New latest_version: ${{ steps.vars.outputs.new_tag }}"
          
          # Update the YAML file with proper indentation
          yq -i '.app.last_successful_version = .app.latest_version' $FILE
          yq -i ".app.latest_version = \"${{ steps.vars.outputs.new_tag }}\"" $FILE
          
          # Validate the update
          new_latest=$(yq '.app.latest_version' $FILE)
          new_last_successful=$(yq '.app.last_successful_version' $FILE)
          
          if [ "$new_latest" != "${{ steps.vars.outputs.new_tag }}" ]; then
            echo "Error: Failed to update latest_version"
            exit 1
          fi
          
          if [ "$new_last_successful" != "$current_latest" ]; then
            echo "Error: Failed to update last_successful_version"
            exit 1
          fi
          
          echo "Successfully updated $FILE:"
          cat $FILE

      - name: Commit and push changes
        run: |
          cd helm-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app-release-metadata.yaml
          git commit -m "Update latest_version to ${{ steps.vars.outputs.new_tag }}" || echo "No changes to commit"
          git push origin ${{ steps.get_branch.outputs.helm_branch }}
