### cd-develop.yaml
name: CD Deploy - Develop

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENV: develop
      APP_NAME: app1

    steps:
      - name: Checkout Helm repo
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region us-east-1 --name develop-cluster

      - name: Install Argo Rollouts CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Wait for ArgoCD Image Updater to sync
        run: sleep 90

      - name: Get rollout name
        run: echo "ROLLOUT_NAME=$(yq '.app.name' charts/${{ env.APP_NAME }}/values.yaml)" >> $GITHUB_ENV

      - name: Canary rollout with QA checks
        run: |
          for weight in 30 60 100; do
            echo "Promoting rollout to ${weight}%"
            kubectl argo rollouts promote $ROLLOUT_NAME -n $ENV || exit 1

            echo "Waiting for rollout to stabilize..."
            kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1

            echo "Triggering E2E tests"
            gh workflow run aggregate-all-e2e.yml \
              --repo my-org/tests-e2e \
              --field environment=$ENV \
              --field app=${{ env.APP_NAME }}

            echo "Waiting for test result..."
            sleep 60  # Replace with polling logic if needed

            gh run list --repo my-org/tests-e2e --workflow aggregate-all-e2e.yml --json conclusion,databaseId -q "[0]" > run.json
            run_id=$(jq -r '.databaseId' run.json)
            status="$(jq -r '.conclusion' run.json)"

            if [ "$status" != "SUCCESS" ]; then
              echo "Tests failed. Initiating rollback."
              git checkout main
              yq e -i '.latest_release_tag = .last_successful_release_tag' app-release-metadata.yaml
              yq e -i '.latest_release_tag = .last_successful_release_tag' helm-release-metadata.yaml
              git commit -am "Rollback to last successful release"
              git push
              exit 1
            fi
          done

      - name: Notify on Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {
              "text": ":rocket: Deployment *${{ env.APP_NAME }}* to *${{ env.ENV }}* succeeded!\n\n‚úÖ Tests passed at all traffic increments.\nüîç [View Test Report](https://my-test-reporting.com/reports/${{ env.APP_NAME }}/${{ env.ENV }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


### cd-qa.yaml
name: CD Deploy - QA

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENV: qa
      APP_NAME: app1

    steps:
      - name: Checkout Helm repo
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.QA_AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region us-east-1 --name qa-cluster

      - name: Install Argo Rollouts CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Wait for ArgoCD Image Updater to sync
        run: sleep 90

      - name: Get rollout name
        run: echo "ROLLOUT_NAME=$(yq '.app.name' charts/${{ env.APP_NAME }}/values.yaml)" >> $GITHUB_ENV

      - name: Canary rollout with QA checks
        run: |
          for weight in 30 60 100; do
            echo "Promoting rollout to ${weight}%"
            kubectl argo rollouts promote $ROLLOUT_NAME -n $ENV || exit 1

            echo "Waiting for rollout to stabilize..."
            kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1

            echo "Triggering E2E tests"
            gh workflow run aggregate-all-e2e.yml \
              --repo my-org/tests-e2e \
              --field environment=$ENV \
              --field app=${{ env.APP_NAME }}

            echo "Waiting for test result..."
            sleep 60

            gh run list --repo my-org/tests-e2e --workflow aggregate-all-e2e.yml --json conclusion,databaseId -q "[0]" > run.json
            run_id=$(jq -r '.databaseId' run.json)
            status="$(jq -r '.conclusion' run.json)"

            if [ "$status" != "SUCCESS" ]; then
              echo "Tests failed. Initiating rollback."
              git checkout main
              yq e -i '.latest_release_tag = .last_successful_release_tag' app-release-metadata.yaml
              yq e -i '.latest_release_tag = .last_successful_release_tag' helm-release-metadata.yaml
              git commit -am "Rollback to last successful release"
              git push
              exit 1
            fi
          done

      - name: Notify on Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {
              "text": ":rocket: Deployment *${{ env.APP_NAME }}* to *${{ env.ENV }}* succeeded!\n\n‚úÖ Tests passed at all traffic increments.\nüîç [View Test Report](https://my-test-reporting.com/reports/${{ env.APP_NAME }}/${{ env.ENV }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


### cd-production.yaml
name: CD Deploy - Production

on:
  workflow_dispatch:
    inputs:
      jira_ticket:
        description: 'JIRA ticket ID'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENV: production
      APP_NAME: app1

    steps:
      - name: Validate JIRA ticket format
        run: |
          if [[ ! "${{ github.event.inputs.jira_ticket }}" =~ ^[A-Z]+-[0-9]+$ ]]; then
            echo "Invalid JIRA ticket format."
            exit 1
          fi

      - name: Checkout Helm repo
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --region us-east-1 --name prod-cluster

      - name: Install Argo Rollouts CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

      - name: Wait for ArgoCD Image Updater to sync
        run: sleep 90

      - name: Get rollout name
        run: echo "ROLLOUT_NAME=$(yq '.app.name' charts/${{ env.APP_NAME }}/values.yaml)" >> $GITHUB_ENV

      - name: Canary rollout with QA checks
        run: |
          for weight in 30 60 100; do
            echo "Promoting rollout to ${weight}%"
            kubectl argo rollouts promote $ROLLOUT_NAME -n $ENV || exit 1

            echo "Waiting for rollout to stabilize..."
            kubectl argo rollouts status $ROLLOUT_NAME -n $ENV --watch || exit 1

            echo "Triggering E2E tests"
            gh workflow run aggregate-all-e2e.yml \
              --repo my-org/tests-e2e \
              --field environment=$ENV \
              --field app=${{ env.APP_NAME }}

            echo "Waiting for test result..."
            sleep 60

            gh run list --repo my-org/tests-e2e --workflow aggregate-all-e2e.yml --json conclusion,databaseId -q "[0]" > run.json
            run_id=$(jq -r '.databaseId' run.json)
            status="$(jq -r '.conclusion' run.json)"

            if [ "$status" != "SUCCESS" ]; then
              echo "Tests failed. Initiating rollback."
              git checkout main
              yq e -i '.latest_release_tag = .last_successful_release_tag' app-release-metadata.yaml
              yq e -i '.latest_release_tag = .last_successful_release_tag' helm-release-metadata.yaml
              git commit -am "Rollback to last successful release"
              git push
              exit 1
            fi
          done

      - name: Notify on Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {
              "text": ":rocket: Deployment *${{ env.APP_NAME }}* to *${{ env.ENV }}* succeeded!\n\n‚úÖ Tests passed at all traffic increments.\nüîç [View Test Report](https://my-test-reporting.com/reports/${{ env.APP_NAME }}/${{ env.ENV }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
