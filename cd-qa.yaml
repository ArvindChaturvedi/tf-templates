# File: .github/workflows/cd-qa.yml

name: Deploy to QA

on:
  push:
    paths:
      - 'app-release-metadata.yaml'
      - 'helm-release-metadata.yaml'
    branches:
      - qa
      - main

jobs:
  deploy-qa:
    runs-on: ubuntu-latest
    environment: qa

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up tools
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Configure Git
      run: |
        git config user.name github-actions
        git config user.email github-actions@users.noreply.github.com

    - name: Read metadata
      id: meta
      run: |
        APP_PREV=$(yq e '.previous_release_tag' app-release-metadata.yaml)
        APP_LATEST=$(yq e '.latest_release_tag' app-release-metadata.yaml)
        CHART_PREV=$(yq e '.previous_release_tag' helm-release-metadata.yaml)
        CHART_LATEST=$(yq e '.latest_release_tag' helm-release-metadata.yaml)
        echo "app_prev=$APP_PREV"  >> $GITHUB_OUTPUT
        echo "app_latest=$APP_LATEST" >> $GITHUB_OUTPUT
        echo "chart_prev=$CHART_PREV"  >> $GITHUB_OUTPUT
        echo "chart_latest=$CHART_LATEST" >> $GITHUB_OUTPUT

    - name: Update Chart and Values
      if: steps.meta.outputs.app_prev != steps.meta.outputs.app_latest || steps.meta.outputs.chart_prev != steps.meta.outputs.chart_latest
      run: |
        yq e -i ".image.tag = \"${{ steps.meta.outputs.app_latest }}\"" values.yaml
        yq e -i ".previous_release_tag = \"${{ steps.meta.outputs.app_latest }}\"" app-release-metadata.yaml
        yq e -i ".version = \"${{ steps.meta.outputs.chart_latest }}\"" Chart.yaml
        yq e -i ".previous_release_tag = \"${{ steps.meta.outputs.chart_latest }}\"" helm-release-metadata.yaml

        git add values.yaml Chart.yaml app-release-metadata.yaml helm-release-metadata.yaml
        git commit -m "chore(qa): update app=${{ steps.meta.outputs.app_latest }}, chart=${{ steps.meta.outputs.chart_latest }}"
        git push

    - name: Login to ArgoCD
      env:
        ARGOCD_SERVER: ${{ secrets.ARGOCD_QA_SERVER }}
        ARGOCD_TOKEN: ${{ secrets.ARGOCD_QA_TOKEN }}
      run: |
        argocd login $ARGOCD_SERVER --token $ARGOCD_TOKEN --insecure

    - name: Sync with ArgoCD
      run: |
        argocd app sync <qa-argocd-app-name>

    - name: Initiate canary rollout to 30%
      run: |
        kubectl --context=${{ secrets.KUBE_CONTEXT_QA }} argo rollouts set weight rollout/<qa-rollout-name> 30

    - name: Trigger QA pipeline at 30%
      run: |
        gh workflow run qa-tests.yml \
          --repo <org>/<qa-tests-repo> \
          -f environment=qa \
          -f canary_weight=30

    - name: Wait and promote to 60%
      run: |
        sleep 60
        kubectl --context=${{ secrets.KUBE_CONTEXT_QA }} argo rollouts set weight rollout/<qa-rollout-name> 60

    - name: Trigger QA pipeline at 60%
      run: |
        gh workflow run qa-tests.yml \
          --repo <org>/<qa-tests-repo> \
          -f environment=qa \
          -f canary_weight=60
        sleep 60

    - name: Promote to 100%
      run: |
        kubectl --context=${{ secrets.KUBE_CONTEXT_QA }} argo rollouts promote rollout/<qa-rollout-name>

    - name: Notify Slack
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"âœ… *QA* deployment `${{ steps.meta.outputs.chart_latest }}` successful."}' \
          $SLACK_WEBHOOK
